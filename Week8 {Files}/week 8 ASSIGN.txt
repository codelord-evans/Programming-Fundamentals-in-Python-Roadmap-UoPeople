Certainly! Below is a Python program that reads a dictionary from an input file, inverts the dictionary, and writes the inverted dictionary to an output file:

```python
import ast

def invert_dictionary(input_file, output_file):
    # Read the dictionary from the input file
    with open(input_file, 'r') as f:
        original_dict_str = f.read()
    
    # Convert the string representation of the dictionary to a Python dictionary
    original_dict = ast.literal_eval(original_dict_str)
    
    # Invert the dictionary
    inverted_dict = {}
    for key, value in original_dict.items():
        if isinstance(value, list):
            for v in value:
                inverted_dict.setdefault(v, []).append(key)
        else:
            inverted_dict.setdefault(value, []).append(key)
    
    # Write the inverted dictionary to the output file
    with open(output_file, 'w') as f:
        f.write(str(inverted_dict))

# Input and output file paths
input_file_path = 'input_dictionary.txt'
output_file_path = 'output_inverted_dictionary.txt'

# Call the function with the file paths
invert_dictionary(input_file_path, output_file_path)
```

This program uses the `ast.literal_eval` function to safely evaluate the string representation of the original dictionary read from the input file. It then iterates through the original dictionary, creating an inverted dictionary where keys are the original values, and values are lists of original keys.

For example, if the input file contains the dictionary:
```
{ 
    'apple': 'red',
    'banana': 'yellow',
    'cherry': 'red',
    'mango': 'yellow',
    'grapes': ['black', 'green']
}
```

The output file will contain the inverted dictionary:
```
{ 
    'red': ['apple', 'cherry'],
    'yellow': ['banana', 'mango'],
    'black': ['grapes'],
    'green': ['grapes']
}
```

Ensure that the input file contains a valid dictionary, and the output file will contain the inverted dictionary as specified.